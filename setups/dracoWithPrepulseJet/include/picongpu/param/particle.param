/* Copyright 2013-2019 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitalization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */
#ifndef PARAM_PPC
#   define PARAM_PPC 240u
#endif

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"

namespace picongpu
{
namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *
     *  unit: none
     *
     * here we essentially allow any weighting since it has no real meaning in 2D3V
     */
    constexpr float_X MIN_WEIGHTING = 0.1;

namespace manipulators
        {
             /** Define initial ion charge to once ionized*/
            struct NotIonizedImpl
            {
                /** Ionize ions once by removing one bound electron */
                template<typename T_Particle>
                DINLINE void operator()(T_Particle& particle)
                {
                    constexpr float_X protonNumber = GetAtomicNumbers<T_Particle>::type::numberOfProtons;
                    particle[boundElectrons_] = protonNumber;
                }
            };
            using NotIonized = generic::Free<NotIonizedImpl>;
        } // namespace manipulators


namespace startPosition
{

        struct RandomParameter
        {
            /** Count of particles per cell at initial state
             *
             *  unit: none
             */
            static constexpr uint32_t numParticlesPerCell = PARAM_PPC;
        };
        using Random = RandomImpl<RandomParameter>;
        using UsedPosition = Random;

} // namespace startPosition

    /** During unit normalization, we assume this is a typical
     *  number of particles per cell for normalization of weighted
     *  particle attributes.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = PARAM_PPC;

} // namespace particles
} // namespace picongpu
